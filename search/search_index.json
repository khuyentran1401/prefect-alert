{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-alert Welcome! Prefect is an open-source library that allows you to orchestrate and observe your dataflow defined in Python. prefect-alert is a decorator that allows you to send an alert when a Prefect flow fails. Read this article if you are not familiar with how to send notifications with Prefect. Getting Started Python setup Requires an installation of Python 3.8+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. The decorator is designed to work with Prefect 2. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-alert with pip : pip install prefect-alert Create a notification block Blocks enable you to store configuration and provide an interface for interacting with external systems. First, start with creating a notification block through UI or a Python script: from prefect.blocks.notifications import SlackWebhook slack_block = SlackWebhook ( url = \"https://hooks.slack.com/services/XXX/XXX/XXX\" ) slack_block . save ( name = \"test\" ) Send an alert Next, use the block created and the decorator prefect_alert.alert_on_failure to send alert when a flow fails. Send an alert when a flow fails from prefect import flow , task from prefect.blocks.notifications import SlackWebhook from prefect_alert import alert_on_failure @task def may_fail (): raise ValueError () @alert_on_failure ( block_type = SlackWebhook , block_name = \"test\" ) @flow def failed_flow (): res = may_fail () return res if __name__ == \"__main__\" : failed_flow () And you will see something like this on your Slack: Send an alert when an asynchronous flow fails from prefect import flow , task from prefect.blocks.notifications import SlackWebhook from prefect_alert import alert_on_failure import asyncio @task async def may_fail (): raise ValueError () @alert_on_failure ( block_type = SlackWebhook , block_name = \"test\" ) @flow async def failed_flow (): res = await may_fail () return res if __name__ == \"__main__\" : asyncio . run ( failed_flow ()) Resources If you encounter any bugs while using prefect-alert , feel free to open an issue in the prefect-alert repository. If you have any questions or issues while using prefect-alert , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-alert for updates too! Development If you'd like to install a version of prefect-alert for development, clone the repository and perform an editable install with pip : git clone https://github.com/khuyentran1401/prefect-alert.git cd prefect-alert/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-alert","text":"","title":"prefect-alert"},{"location":"#welcome","text":"Prefect is an open-source library that allows you to orchestrate and observe your dataflow defined in Python. prefect-alert is a decorator that allows you to send an alert when a Prefect flow fails. Read this article if you are not familiar with how to send notifications with Prefect.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.8+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. The decorator is designed to work with Prefect 2. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-alert with pip : pip install prefect-alert","title":"Installation"},{"location":"#create-a-notification-block","text":"Blocks enable you to store configuration and provide an interface for interacting with external systems. First, start with creating a notification block through UI or a Python script: from prefect.blocks.notifications import SlackWebhook slack_block = SlackWebhook ( url = \"https://hooks.slack.com/services/XXX/XXX/XXX\" ) slack_block . save ( name = \"test\" )","title":"Create a notification block"},{"location":"#send-an-alert","text":"Next, use the block created and the decorator prefect_alert.alert_on_failure to send alert when a flow fails.","title":"Send an alert"},{"location":"#send-an-alert-when-a-flow-fails","text":"from prefect import flow , task from prefect.blocks.notifications import SlackWebhook from prefect_alert import alert_on_failure @task def may_fail (): raise ValueError () @alert_on_failure ( block_type = SlackWebhook , block_name = \"test\" ) @flow def failed_flow (): res = may_fail () return res if __name__ == \"__main__\" : failed_flow () And you will see something like this on your Slack:","title":"Send an alert when a flow fails"},{"location":"#send-an-alert-when-an-asynchronous-flow-fails","text":"from prefect import flow , task from prefect.blocks.notifications import SlackWebhook from prefect_alert import alert_on_failure import asyncio @task async def may_fail (): raise ValueError () @alert_on_failure ( block_type = SlackWebhook , block_name = \"test\" ) @flow async def failed_flow (): res = await may_fail () return res if __name__ == \"__main__\" : asyncio . run ( failed_flow ())","title":"Send an alert when an asynchronous flow fails"},{"location":"#resources","text":"If you encounter any bugs while using prefect-alert , feel free to open an issue in the prefect-alert repository. If you have any questions or issues while using prefect-alert , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-alert for updates too!","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-alert for development, clone the repository and perform an editable install with pip : git clone https://github.com/khuyentran1401/prefect-alert.git cd prefect-alert/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"alert/","text":"prefect_alert.alert Decorator to send an alert when a task or a flow fails Classes Functions alert_on_failure Decorator to send an alert when a task or a flow fails This decorator must be placed before your @flow or @task decorator. Parameters: Name Type Description Default block_type AppriseNotificationBlock Type of your notification block (.i.e, 'SlackWebhook') required block_name str Name of your notification block (.i.e, 'test') required Examples: Send a notification when a flow fails from prefect import flow , task from prefect.blocks.notifications import SlackWebhook from prefect_alert import alert_on_failure @task def may_fail (): raise ValueError () @alert_on_failure ( block_type = SlackWebhook , block_name = \"test\" ) @flow def failed_flow (): res = may_fail () return res if __name__ == \"__main__\" : failed_flow () Source code in prefect_alert/alert.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def alert_on_failure ( block_type : AppriseNotificationBlock , block_name : str ): \"\"\"Decorator to send an alert when a task or a flow fails This decorator must be placed before your `@flow` or `@task` decorator. Args: block_type: Type of your notification block (.i.e, 'SlackWebhook') block_name: Name of your notification block (.i.e, 'test') Examples: Send a notification when a flow fails ```python from prefect import flow, task from prefect.blocks.notifications import SlackWebhook from prefect_alert import alert_on_failure @task def may_fail(): raise ValueError() @alert_on_failure(block_type=SlackWebhook, block_name=\"test\") @flow def failed_flow(): res = may_fail() return res if __name__==\"__main__\": failed_flow() ``` \"\"\" def decorator ( flow ): if is_async_fn ( flow ): @wraps ( flow ) async def wrapper ( * args , ** kwargs ): \"\"\"A wrapper of an async task/flow\"\"\" return_state = kwargs . pop ( \"return_state\" , None ) state : prefect . State = await flow ( * args , return_state = True , ** kwargs ) notification_block : AppriseNotificationBlock = await block_type . load ( block_name ) if state . is_failed (): message = _get_alert_message ( state , flow ) await notification_block . notify ( message , subject = \"Flow failed...\" ) if return_state : return state else : return state . result () return WrappedFlow ( wrapper ) else : @wraps ( flow ) def wrapper ( * args , ** kwargs ): \"\"\"A wrapper of a sync task/flow\"\"\" return_state = kwargs . pop ( \"return_state\" , None ) state : prefect . State = flow ( * args , return_state = True , ** kwargs ) notification_block : AppriseNotificationBlock = block_type . load ( block_name ) if state . is_failed (): message = _get_alert_message ( state , flow ) notification_block . notify ( message , subject = \"Flow failed...\" ) if return_state : return state else : return state . result () return WrappedFlow ( wrapper ) return decorator","title":"Alert Decorator"},{"location":"alert/#prefect_alert.alert","text":"Decorator to send an alert when a task or a flow fails","title":"alert"},{"location":"alert/#prefect_alert.alert-classes","text":"","title":"Classes"},{"location":"alert/#prefect_alert.alert-functions","text":"","title":"Functions"},{"location":"alert/#prefect_alert.alert.alert_on_failure","text":"Decorator to send an alert when a task or a flow fails This decorator must be placed before your @flow or @task decorator. Parameters: Name Type Description Default block_type AppriseNotificationBlock Type of your notification block (.i.e, 'SlackWebhook') required block_name str Name of your notification block (.i.e, 'test') required Examples: Send a notification when a flow fails from prefect import flow , task from prefect.blocks.notifications import SlackWebhook from prefect_alert import alert_on_failure @task def may_fail (): raise ValueError () @alert_on_failure ( block_type = SlackWebhook , block_name = \"test\" ) @flow def failed_flow (): res = may_fail () return res if __name__ == \"__main__\" : failed_flow () Source code in prefect_alert/alert.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def alert_on_failure ( block_type : AppriseNotificationBlock , block_name : str ): \"\"\"Decorator to send an alert when a task or a flow fails This decorator must be placed before your `@flow` or `@task` decorator. Args: block_type: Type of your notification block (.i.e, 'SlackWebhook') block_name: Name of your notification block (.i.e, 'test') Examples: Send a notification when a flow fails ```python from prefect import flow, task from prefect.blocks.notifications import SlackWebhook from prefect_alert import alert_on_failure @task def may_fail(): raise ValueError() @alert_on_failure(block_type=SlackWebhook, block_name=\"test\") @flow def failed_flow(): res = may_fail() return res if __name__==\"__main__\": failed_flow() ``` \"\"\" def decorator ( flow ): if is_async_fn ( flow ): @wraps ( flow ) async def wrapper ( * args , ** kwargs ): \"\"\"A wrapper of an async task/flow\"\"\" return_state = kwargs . pop ( \"return_state\" , None ) state : prefect . State = await flow ( * args , return_state = True , ** kwargs ) notification_block : AppriseNotificationBlock = await block_type . load ( block_name ) if state . is_failed (): message = _get_alert_message ( state , flow ) await notification_block . notify ( message , subject = \"Flow failed...\" ) if return_state : return state else : return state . result () return WrappedFlow ( wrapper ) else : @wraps ( flow ) def wrapper ( * args , ** kwargs ): \"\"\"A wrapper of a sync task/flow\"\"\" return_state = kwargs . pop ( \"return_state\" , None ) state : prefect . State = flow ( * args , return_state = True , ** kwargs ) notification_block : AppriseNotificationBlock = block_type . load ( block_name ) if state . is_failed (): message = _get_alert_message ( state , flow ) notification_block . notify ( message , subject = \"Flow failed...\" ) if return_state : return state else : return state . result () return WrappedFlow ( wrapper ) return decorator","title":"alert_on_failure()"}]}